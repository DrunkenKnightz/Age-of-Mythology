//--------------------------------------
//--- 010 Editor v3.1 Binary Template
//
// File:    brg.bt
// Author:  Petar Tasev
// Revision:1.0
// Purpose: Highlight brg files from AoM game.
//--------------------------------------
LittleEndian();

typedef uint16 hfloat <read=h2floatRead>;

string h2floatRead( const hfloat &v )
{
   byte currData[2];
   ConvertDataToBytes(v, currData);

   byte data[4];
   data[0] = 0;
   data[1] = 0;
   data[2] = currData[0];
   data[3] = currData[1];
   float  fValue;
   //fValue = (float)data;
   fValue = ConvertBytesToFloat(data);
   
   string s;
   //SPrintf( s, "%x", data );
   //SScanf( s, "%x", fValue );
   SPrintf( s, "%f", fValue );
   return s;
}
string hfloatRead( const hfloat &v )
{
   uint32 dataValue;
   float  fValue;
   
   dataValue = 0;
   
   if (v & 0x7C00)
   {
      dataValue = ((v & 0x7C00) + 0x1C000) << 13;
   }
   
   dataValue |= ((v & 0x8000) << 16) | ((v & 0x03FF) << 13);
   
   string s;
   SPrintf( s, "%x", dataValue );
   SScanf( s, "%x", fValue );
   SPrintf( s, "%f", fValue );
   return s;
}
/*
    typedef enum {
        NONE1        = 0x80000028,
        TRANSPCOLOR  = 0x40000028,
        NONE2        = 0x20000028,
        NONE3        = 0x10000028,
        MOVINGTEX    = 0x08000028,
        NOTFIRSTMESH = 0x04000028,
        NONE4        = 0x02000028,
        ATTACHPOINTS = 0x01000028,
        NONE5        = 0x00800028,
        MATERIALS    = 0x00400028,
        CHANGINGCOL  = 0x00200028,
        NONE7        = 0x00100028,
        NONE8        = 0x00080028,
        NONE9        = 0x00040028,
        TEXTURE      = 0x00020028,
        VERTCOLOR    = 0x00010028
    } MeP;
*/
    typedef enum <uint16> {
        NONE1        = 0x8000,
        TRANSPCOLOR  = 0x4000,
        NONE2        = 0x2000,
        NONE3        = 0x1000,
        MOVINGTEX    = 0x0800,
        NOTFIRSTMESH = 0x0400,
        NONE4        = 0x0200,
        ATTACHPOINTS = 0x0100,
        NONE5        = 0x0080,
        MATERIALS    = 0x0040,
        CHANGINGCOL  = 0x0020,
        NONE7        = 0x0010,
        NONE8        = 0x0008,
        NONE9        = 0x0004,
        TEXTURE      = 0x0002,
        VERTCOLOR    = 0x0001
    } MeshFlags <read=readMeshFlags>;

    typedef enum <uint16> {
        NOLOOPANIMATE  = 0x0020, // don't animate Last-First frame
        FORMATNONE1  = 0x0010, // haven't seen used
        ANIMATED  = 0x0008, // maybe means Animated
        HASMATERIAL  = 0x0004, // uses materials
        ANIMATEDUV  = 0x0002, // Animated UV
        ROTATE       = 0x0001 // rotates with the player view
    } MeshFormat <read=readMeshFlags>;

    typedef enum <uint> {
        SFX          = 0x1C000000,
        MATNONE3     = 0x02000000, // ulfsark death
        MATNONE4     = 0x01000000, // low poly ulfsark death
        MATNONE1     = 0x00800000,
        GLOW         = 0x00200000,
        PLAYERCOLOR  = 0x00040000,
        SOLIDCOLOR   = 0x00020000,
        MATNONE2     = 0x00008300,
        MATTEXTURE   = 0x00000030
    } BrgMatFlag <format=hex>;
string readMeshFlags (local MeshFlags &flags)
{
	local string s = "";
	local int commaNeeded = 0;
	local MeshFlags i = 1;

	SPrintf (s, "%x: ", flags);
	while (i < NONE1) 
	{
        //Printf("'%u'?", i);
		if (flags & i)
		{
			if (commaNeeded) 
			{ s += ", "; }
			s +=  EnumToString(i);
			commaNeeded = 1;
		}
		i = i << 1;
	}
	return s;
}
int meHasFlag(MeshFlags &flags, MeshFlags flag)
{
    return (flags & flag) == flag;
}
int maHasFlag(BrgMatFlag &flags, BrgMatFlag flag)
{
    return (flags & flag) == flag;
}

typedef struct (int size) {
    local int tmp;
    for (tmp = 0; tmp < size; tmp++)
        hfloat val;
} Vector <optimize=true>;
typedef struct (int size) {
    local int tmp;
    for (tmp = 0; tmp < size; tmp++)
        int16 val;
} VectorInt16 <optimize=true>;
typedef struct (int size) {
    local int tmp;
    for (tmp = 0; tmp < size; tmp++)
        float val;
} VectorFloat <optimize=true>;

struct {
    struct HEADER {
        char magic[4];
        int unknown01;
        int numMaterials;
        int unknown02;
        int numMeshes;
        int space;
        int unknown03;
    } header;

    if (header.numMeshes > 1) {
        struct {
            char asetHead[4];
            int numFrames;
            float frameStep;
            float animTime;
            float frequency;
            float spf;
            float fps;
            int space;
        } asetHeader;
    }

    local int meshID = 0;
    local string ttttt = EnumToString(VERTCOLOR);

    struct Mesh {
        char meshHead[4];
        int16 version; // always 22
        int16 meshFormat2; // 4 -- (1 frame/animTime = 0), 1(5) -- Rotate View, 8(12) -- Animated, (6) -- animUV, (36), (44), (13)
        int16 numVertices;
        int16 numFaces;
        int unknown02; // 0, 1, 256 -- variable anim time,
        float unknown03[8]; // [4] seems to be always same as meshX below
        float groundZ;
        byte unknown04[6]; // 0 for u02 == 1, 
        MeshFlags properties; //unknown05/06
            local byte unknown05 = properties;
            local byte unknown06 = properties >> 8;
        VectorFloat negativeMeshPos(3);
        VectorFloat meshPos(3);
        VectorFloat vertices(3)[numVertices];
        VectorFloat normals(3)[numVertices];

        local int i = 0;

        //if (MAT(64) || (numMeshes > 1 && (MAT(64) || (Changing | VertColor)(97) || ((MAT | TEX)(66) && ((NotFirst)(4) || (NotFirst | Attach)(5)) ) && unknown02 != 256))) {
                
        //} else {
        //    byte textureCoords[4 * numVertices];
        //}

        if (!((properties & NOTFIRSTMESH) == NOTFIRSTMESH) || ((properties & MOVINGTEX) == MOVINGTEX)) {
            if ((properties & TEXTURE) == TEXTURE) {
                // UV
                VectorFloat texVert(2)[numVertices];
            }
        }
        if (!((properties & NOTFIRSTMESH) == NOTFIRSTMESH)) {
            if ((properties & MATERIALS) == MATERIALS) {
                int16 faceMat[numFaces];
                //VectorInt16 faceMat(1)[numFaces];
                //for (i = 0; i < numFaces; i++) {
                //    int16 faceMat;
                //}
            }

            VectorInt16 faceVert(3)[numFaces];

            if ((properties & MATERIALS) == MATERIALS) {
                int16 vertMat[numVertices];
                //VectorInt16 vertMat(1)[numVertices];
                //for (i = 0; i < numVertices; i++) {
                //    int16 vertexMat;
                //}
            }
        }

        //int unknown09[3];//[24];
        int16 numIndex0; // same as values in attachpoints
        int16 numMatrix0; // same as values in attachpoints
        int unknown091;
        int unknown092; // always seems to be 0
        int16 unknown093a; // seems to be numMaterialsUsed - 1
        int16 unknown093b;
        float animTime;
        int unknown09Const; // always the same value, one for aom, one for tt models
        int16 checkSpace; //09a
        int16 unknown09e; // always seems to be 0

        if (!checkSpace) {
            float unknown09b; // always seems to be 1
            int lenSpace; //09c
            int numMaterialsUsed;
        }

        if ((((properties & TRANSPCOLOR) == TRANSPCOLOR || (properties & CHANGINGCOL) == CHANGINGCOL) && !((properties & NOTFIRSTMESH) == NOTFIRSTMESH)) || (properties & VERTCOLOR) == VERTCOLOR) {
            byte unknown0a[4 * numVertices];
        }

        if ((properties & ATTACHPOINTS) == ATTACHPOINTS) {
            //if (!((properties & NOTFIRSTMESH) == NOTFIRSTMESH)) {
                int16 numMatrix;
                int16 numIndex;
                int16 unknown10; //always 1?
            //}

            VectorFloat xVector(3)[numMatrix];
            VectorFloat yVector(3)[numMatrix];
            VectorFloat zVector(3)[numMatrix];
            VectorFloat position(3)[numMatrix];
            VectorFloat unknown11a(3)[numMatrix];
            VectorFloat unknown11b(3)[numMatrix];
            //hfloat unknown11[6 * numMatrix];

            local int32 numPoints = 0;
            struct AttachNameIndex {
                int numAttach;
                int id;
                //numPoints += numAttach;
            } attachNameIndex[numIndex] <optimize=true>;
            for (i = 0; i < numIndex; i++) {
                numPoints += attachNameIndex[i].numAttach;
            }
            //unknown12

            byte pointIndex[numPoints]; //unknown13

            if (!checkSpace && lenSpace) {
                float variableSpeed[lenSpace]; // frame[x].fEndofPlaytime = mAnimationDuration * mVariableSpeed[x]
/*----------
- example:
hNumberofFrames = 4
mAnimationDuration = 3.0
mVariableSpeed = {0.2, 0.6, 0.7, 1.0}
- then:
frame[0] plays from 0.0 to 0.6 -> duration = 0.6
frame[1] plays from 0.6 to 1.8 -> duration = 1.2
frame[2] plays from 1.8 to 2.1 -> duration = 0.3
frame[3] plays from 2.1 to 3.0 -> duration = 0.9
----------*/
            }
            VectorFloat ttttttt(3)[numFaces];
        }

        meshID++;
    } item[header.numMeshes] <optimize=false>;

    if ((item[0].properties & MATERIALS) == MATERIALS) {
        struct Material {
            char mtrlHead[4];
            int id;
            BrgMatFlag properties;
            int unknown01b;
            int nameLength;
            VectorFloat color(3); //unknown02 [36 bytes]
            VectorFloat specular(3);
            VectorFloat reflection(3);
            VectorFloat ambient(3); //unknown03 [12 bytes]
    
            char name[nameLength];

            if ((properties & SOLIDCOLOR) == SOLIDCOLOR) {
                float unknown05;
            }
            if (maHasFlag(properties, MATNONE2))
            {
                int nameLength2;
                char name2[nameLength2];
            }

            float alpha; //unknown04

            if ((properties & SFX) == SFX) {
                byte numSFX;
                struct MatSFX {
                    byte sfxId;
                    int16 sfxNameLength;
                    char sfxName[sfxNameLength];
                } sfx[numSFX] <optimize=false>;
            }
        } material[header.numMaterials] <optimize=false>;
    }
} file;